#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT 0
#define CODE    1
#define MISC    2

/ {
    combos {
        compatible = "zmk,combos";

        Misc_Layer {
            bindings = <&to 3>;
            key-positions = <29 20>;
        };

        Norwegian_AE {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <27 28>;
        };

        Norwegian_OA {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <21 22>;
        };

        SoftOff {
            bindings = <&soft_off>;
            key-positions = <9 19 29>;
        };

        Combo_F12 {
            bindings = <&kp F12>;
            key-positions = <6 7>;
            timeout-ms = <10>;
        };

        Combo_Alt_Left {
            bindings = <&kp LA(LEFT)>;
            key-positions = <7 8>;
            timeout-ms = <10>;
        };
    };

    behaviors {
        // uht: umlaut_hold_tap {
        //     compatible = "zmk,behavior-hold-tap";
        //     #binding-cells = <2>;
        //     flavor = "tap-preferred";
        //     tapping-term-ms = <200>;
        //     quick-tap-ms = <200>;
        //     bindings = <&kp>, <&kp>;
        // };

        mt_HR: mt_HR {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_HR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        lt_HR_L: lt_HR_L {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_HR_L";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <23 22 21 20 24 6 7 8 9 16 17 18 19 26 27 28 29 5 15 25>;
        };

        lt_HR_R: lt_HR_R {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_HR_R";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <23 24 0 1 2 3 4 10 11 12 13 14 23 24 20 21 22>;
        };

        left_win: left_win {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_WIN";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
  &kp Q                 &kp W              &lt 5 E              &kp R           &kp T           &kp Y                     &kp U           &kp I                 &kp O               &kp P
  &left_win LEFT_GUI A  &mt_HR LEFT_ALT S  &mt_HR LEFT_SHIFT D  &mt_HR LCTRL F  &lt_HR_L 1 G    &lt_HR_R 1 H              &mt_HR RCTRL J  &mt_HR RIGHT_SHIFT K  &mt_HR RIGHT_ALT L  &mt_HR RIGHT_GUI SEMI
  &kp Z                 &kp X              &kp C                &kp V           &kp B           &kp N                     &kp M           &kp COMMA             &kp DOT             &kp FSLH
                                                                &none           &lt 2 ENTER     &mt_HR RIGHT_SHIFT SPACE  &kp BACKSPACE
            >;
        };

        code_layer {
            bindings = <
  &kp LS(NUMBER_1)  &kp LA(LC(NUMBER_2))  &kp LA(LC(NUMBER_4))  &kp LS(N5)  &kp MINUS       &kp SLASH  &kp NUBS    &kp LS(NUBS)    &kp LPAR        &kp TILDE
  &kp LS(MINUS)     &kp LS(NUMBER_2)      &kp LS(NUMBER_3)      &kp LS(N6)  &kp PIPE        &none      &kp LS(N8)  &kp LC(LA(N7))  &kp LC(LA(N8))  &kp BSLH
  &kp LS(N0)        &kp N1                &kp LS(NUHS)          &kp LS(N7)  &kp NUMBER_1    &none      &kp LS(N9)  &kp LC(LA(N0))  &kp LC(LA(N9))  &none
                                                                &to 0       &trans          &trans     &trans
            >;
        };

        nav_num {
            bindings = <
  &kp ESCAPE  &kp HOME            &kp UP     &kp END        &kp PG_UP        &none      &kp N7                 &kp N8                 &kp N9               &none
  &kp TAB     &kp LEFT            &kp DOWN   &kp RIGHT      &kp PAGE_DOWN    &kp COMMA  &mt_HR RCTRL NUMBER_4  &mt_HR RIGHT_SHIFT N5  &mt_HR RIGHT_ALT N6  &none
  &kp DELETE  &kp LC(LEFT_ARROW)  &kp LC(C)  &kp LC(RIGHT)  &none            &kp DOT    &kp NUMBER_1           &kp NUMBER_2           &kp NUMBER_3         &kp N0
                                             &trans         &trans           &trans     &trans
            >;
        };

        misc_layer {
            bindings = <
  &none         &none   &kp C_BRIGHTNESS_INC  &kp C_VOLUME_UP    &none    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &none  &bt BT_CLR
  &kp LEFT_WIN  &none   &kp C_BRIGHTNESS_DEC  &kp C_VOLUME_DOWN  &none    &none         &none         &none         &none  &kp RIGHT_WIN
  &to 4         &kp F1  &kp F2                &kp F3             &none    &none         &none         &none         &none  &none
                                              &to 0              &none    &none         &none
            >;
        };

        Game {
            bindings = <
  &kp ESC    &kp Q  &kp W  &kp E  &kp R        &kp N1     &none      &kp UP_ARROW  &none      &none
  &kp TAB    &kp A  &kp S  &kp D  &kp F        &kp N2     &kp LEFT   &kp DOWN      &kp RIGHT  &none
  &kp LCTRL  &kp Z  &kp X  &kp C  &kp V        &kp N3     &none      &none         &none      &none
                           &to 0  &kp SPACE    &kp SPACE  &kp RSHFT
            >;
        };

        FunctionLayer {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &kp F7  &kp F8  &kp F9  &kp F10
  &trans  &trans  &trans  &trans  &trans    &trans  &kp F4  &kp F5  &kp F6  &kp F11
  &trans  &trans  &trans  &trans  &trans    &trans  &kp F1  &kp F2  &kp F3  &kp F12
                          &trans  &trans    &trans  &trans
            >;
        };
    };
};
